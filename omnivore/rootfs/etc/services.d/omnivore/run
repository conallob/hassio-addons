#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Add-on: Omnivore
# Runs Omnivore
# ==============================================================================

# Set working directory
cd /app/self-hosting/docker-compose

# Load environment variables
source /data/omnivore/.env

# Run database migrations first
bashio::log.info "Running database migrations..."
cd /app
npm install --prefix packages/db
npm run --prefix packages/db migrate

# Start Omnivore services
bashio::log.info "Starting Omnivore services..."
cd /app/self-hosting/docker-compose

# Create a simple docker-compose-ha.yml file for running the services without Docker
cat > docker-compose-ha.yml << EOF
version: '3'
services:
  omnivore-api:
    environment:
      - NODE_ENV=production
      - DATABASE_URL=\${DATABASE_URL}
      - REDIS_URL=\${REDIS_URL}
      - BASE_URL=\${BASE_URL}
      - SERVER_BASE_URL=\${SERVER_BASE_URL}
      - HIGHLIGHTS_BASE_URL=\${HIGHLIGHTS_BASE_URL}
      - CLIENT_URL=\${CLIENT_URL}
      - IMAGEPROXY_URL=\${IMAGEPROXY_URL}
      - AUTH_SECRET=\${AUTH_SECRET}
      - COOKIE_DOMAIN=\${COOKIE_DOMAIN}
      - AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=\${AWS_REGION}
      - LOCAL_MINIO_URL=\${LOCAL_MINIO_URL}
      - GCS_USE_LOCAL_HOST=\${GCS_USE_LOCAL_HOST}
    command: sh -c "cd /app && npm run start:api"

  omnivore-web:
    environment:
      - NODE_ENV=production
      - BASE_URL=\${BASE_URL}
      - SERVER_BASE_URL=\${SERVER_BASE_URL}
      - HIGHLIGHTS_BASE_URL=\${HIGHLIGHTS_BASE_URL}
      - CLIENT_URL=\${CLIENT_URL}
      - IMAGEPROXY_URL=\${IMAGEPROXY_URL}
    command: sh -c "cd /app && npm run start:web"

  omnivore-puppeteer-parse:
    environment:
      - NODE_ENV=production
      - DATABASE_URL=\${DATABASE_URL}
      - REDIS_URL=\${REDIS_URL}
    command: sh -c "cd /app && npm run start:puppeteer-parse"

  omnivore-imageproxy:
    environment:
      - NODE_ENV=production
    command: sh -c "cd /app && npm run start:imageproxy"
EOF

# Install dependencies
cd /app
bashio::log.info "Installing dependencies..."
npm install

# Start services in parallel
bashio::log.info "Starting API service..."
npm run start:api &
API_PID=$!

bashio::log.info "Starting Web service..."
npm run start:web &
WEB_PID=$!

bashio::log.info "Starting Puppeteer Parse service..."
npm run start:puppeteer-parse &
PUPPETEER_PID=$!

bashio::log.info "Starting Image Proxy service..."
npm run start:imageproxy &
IMAGEPROXY_PID=$!

# Wait for any service to exit
wait -n $API_PID $WEB_PID $PUPPETEER_PID $IMAGEPROXY_PID

# If we get here, one of the services has exited, so exit with an error
bashio::log.error "One of the Omnivore services has exited unexpectedly"
exit 1
